/**
 * @file bd_usart.h
 * @author bdelta
 * @brief STM32F4 UART3 Library Header
 * @version 0.1
 * @date 2022-09-04
 * 
 * @copyright Copyright (c) 2022
 * 
 */

#ifndef __BD_USART_H__
#define __BD_USART_H__

#include <stdint.h>

typedef volatile uint32_t bd_rdwr_reg;

/* GPIOD multiplex */
#define BD_GPIOD_BASE 0x40020C00UL
#define BD_GPIO_MODER_OFFSET 0x00UL
#define BD_GPIOD_MODER_REG (BD_GPIOD_BASE + BD_GPIO_MODER_OFFSET)
#define BD_GPIO_MODER_P8_SHIFT 16U
#define BD_GPIO_MODER_AF_MODE_VAL 0x2UL
#define BD_GPIO_AFRH_OFFSET 0x24UL
#define BD_GPIOD_AFRH_REG (BD_GPIOD_BASE + BD_GPIO_AFRH_OFFSET)
#define BD_GPIO_AFRH8_SHIFT 0U
#define BD_GPIO_AF7 7U
#define BD_GPIO_AFRH8_AF7 (BD_GPIO_AF7 << BD_GPIO_AFRH8_SHIFT)
#define BD_GPIO_PUPDR_OFFSET 0x0CUL
#define BD_GPIOD_PUPDR_REG (BD_GPIOD_BASE + BD_GPIO_PUPDR_OFFSET)
#define BD_GPIO_PUPDR_PUPDR8_BIT_SHIFT 16U
#define BD_GPIO_PUPDR_PULLUP_VAL 0x1UL
#define BD_GPIO_OTYPER_OFFSET 0x04UL
#define BD_GPIOD_OTYPER_REG (BD_GPIOD_BASE + BD_GPIO_OTYPER_OFFSET)
#define BD_GPIO_OTYPER_P8_SHIFT 8U
#define BD_GPIO_OSPEEDR_OFFSET 0x08UL
#define BD_GPIOD_OSPEEDR_REG (BD_GPIOD_BASE + BD_GPIO_OSPEEDR_OFFSET)
#define BD_GPIO_OSPEEDR_P8_SHIFT 16U
#define BD_GPIO_OSPEEDR_VERY_HIGH_SPEED_VAL 0x3UL

/* USART clock setup */
#define BD_RCC_BASE 0x40023800UL
#define BD_RCC_APB1ENR_OFFSET 0x40UL
#define BD_RCC_REG (BD_RCC_BASE + BD_RCC_APB1ENR_OFFSET)
#define BD_RCC_USART3_EN_BIT_SHIFT 18U
#define BD_RCC_USART3_EN_BIT (0x1UL << BD_RCC_USART3_EN_BIT_SHIFT)

/* USART Regs */
#define BD_USART3_BASE 0x40004800UL
#define BD_USARTCR1_OFFSET 0x0CUL
#define BD_USART3CR1_REG (BD_USART3_BASE + BD_USARTCR1_OFFSET)
#define BD_USARTCR1_UEN_BIT_SHIFT 13U
#define BD_USARTCR1_UEN_BIT (0x1UL << BD_USARTCR1_UEN_BIT_SHIFT)
#define BD_USARTCR1_M_BIT_SHIFT 12U
#define BD_USARTCR1_M_BIT (0x1UL << BD_USARTCR1_M_BIT_SHIFT)
#define BD_USARTCR1_OSAMP_BIT_SHIFT 15U
#define BD_USARTCR1_OSAMP_BIT (0x1UL << BD_USARTCR1_OSAMP_BIT_SHIFT)
#define BD_USARTCR2_OFFSET 0x10UL
#define BD_USART3CR2_REG (BD_USART3_BASE + BD_USARTCR2_OFFSET)
#define BD_USARTCR2_STOP_BITS_SHIFT 12U
#define BD_USARTCR2_STOP_BITS (0x3UL << BD_USARTCR2_STOP_BITS_SHIFT)

/* Transmission */
#define BD_USARTCR1_TE_BIT_SHIFT 3U
#define BD_USARTCR1_TE_BIT (0x1UL << BD_USARTCR1_TE_BIT_SHIFT)

#define BD_USARTSR_OFFSET 0x0UL
#define BD_USART3SR_REG (BD_USART3_BASE + BD_USARTSR_OFFSET)
#define BD_USARTSR_TXE_BIT_SHIFT 7U
#define BD_USARTSR_TXE_BIT (0x1UL << BD_USARTSR_TXE_BIT_SHIFT)

#define BD_USARTDR_OFFSET 0x04
#define BD_USART3DR_REG (BD_USART3_BASE + BD_USARTDR_OFFSET)

#define BD_USARTSR_TC_BIT_SHIFT 6U
#define BD_USARTSR_TC_BIT (0x1UL << BD_USARTSR_TC_BIT_SHIFT)

#define BD_USART3_MAX_STR_LEN 256

/* TODO: Calculate the USARTDIV automatically */
/* 38 MHz, 9600 baud rate, oversample 8 = 494.791 */
// #define BD_USART_DIV_MANTISSA 494UL
#define BD_USART_DIV_MANTISSA 247UL
// #define BD_USART_DIV_FRAC 13UL /* 0.8125 */
#define BD_USART_DIV_FRAC 6UL
#define BD_USART_DIV_MANTISSA_SHIFT 4U
#define BD_USART_DIV_MANTISSA_VAL (BD_USART_DIV_MANTISSA << BD_USART_DIV_MANTISSA_SHIFT)
#define BD_USART_DIV_VAL (BD_USART_DIV_MANTISSA_VAL | BD_USART_DIV_FRAC)
#define BD_USARTBRR_OFFSET 0x08UL
#define BD_USART3BRR_REG (BD_USART3_BASE + BD_USARTBRR_OFFSET)

extern char bd_usart3_tx_buf[BD_USART3_MAX_STR_LEN];

void bd_usart3_setup(void);
void bd_print_uart3(char arr[BD_USART3_MAX_STR_LEN]);
void bd_clear_uart3(void);

#endif /* __BD_USART_H__ */